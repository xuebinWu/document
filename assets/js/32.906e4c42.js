(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{213:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"网络请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 网络请求")]),t._v(" "),e("p",[t._v("网络请求部分，基于uni-app 封装了一个类axios的request类。")]),t._v(" "),e("h3",{attrs:{id:"路由的基础配置想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由的基础配置想","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由的基础配置想")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const http = new Request({\n  baseUrl: process.env.VUE_APP_BASE_URL, // api的base_url\n  header: {\n    'content-type': 'application/x-www-form-urlencoded',\n    Accept: 'application/json'\n  }\n})\n")])])]),e("h3",{attrs:{id:"请求之前拦截器和-axios-的-request-方法相似"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求之前拦截器和-axios-的-request-方法相似","aria-hidden":"true"}},[t._v("#")]),t._v(" 请求之前拦截器和 axios 的 request 方法相似")]),t._v(" "),e("h3",{attrs:{id:"请求之后拦截器和-axios-的-response-方法相似"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求之后拦截器和-axios-的-response-方法相似","aria-hidden":"true"}},[t._v("#")]),t._v(" 请求之后拦截器和 axios 的 response 方法相似")]),t._v(" "),e("h3",{attrs:{id:"自定义验证器-validahttpatus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义验证器-validahttpatus","aria-hidden":"true"}},[t._v("#")]),t._v(" 自定义验证器 validahttpatus")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n * 自定义验证器，如果返回true 则进入响应拦截器的响应成功函数(resolve)，否则进入响应拦截器的响应错误函数(reject)\n * @param { Number } statusCode - 请求响应体statusCode（只读）\n * @return { Boolean } 如果为true,则 resolve, 否则 reject\n */\nhttp.validahttpatus = ({ statusCode, data }) => {\n  return statusCode === 200 && data.code === '0'\n}\n")])])])])},[],!1,null,null,null);a.default=r.exports}}]);